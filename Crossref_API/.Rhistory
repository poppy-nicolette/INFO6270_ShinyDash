import requests
import xml.etree.ElementTree as ET
View(query_1)
View(p)
bir_search %>%
filter(!(so %in% "AIAA SPACE 2009 Conference & Exposition") | is.na(so)) %>%
ggplot() +
aes(x = publication_year, y = so, group = is_oa) +
geom_tile() +
labs(x = "Publilcation Year", y = "Count of articlels") +
ggthemes::theme_fivethirtyeight()
library(shiny); runApp('~/Desktop/CODING_WORKING/R/PROJECTS/BiblioNet/app_Copy.R')
setwd("~/Documents/GitHubhttps/github_com/poppy-nicolette/INFO6270_ShinyDash/Crossref_API")
shiny::runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
library(rcrossref)
library(htmltools)
library(magrittr)
library(purrr)
library(DT)
library(tidyr)
library(dplyr)
inputDOI = "10.1007/s11192-015-1765-5"
cr_result <- cr_works(dois = inputDOI) %>%
pluck("data")
# print the type of each column (e.g. character, numeric, logical, list)
#purrr::map_chr(cr_result, typeof)
#https://ciakovx.github.io/rcrossref.html#Unnesting_list_columns
cr_result %>%
#download button
# just authors
authors <- cr_result %>%
dplyr::select(author, url, doi, issn) %>%
tidyr::unnest(author, .drop = TRUE)
library(rcrossref)
library(htmltools)
library(magrittr)
library(purrr)
library(DT)
library(tidyr)
library(dplyr)
inputDOI = "10.1007/s11192-015-1765-5"
cr_result <- cr_works(dois = inputDOI) %>%
pluck("data")
View(cr_result)
#https://ciakovx.github.io/rcrossref.html#Unnesting_list_columns
cr_result %>%
datatable(cr_result)
authors <- cr_result %>%
dplyr::select(author, url, doi, issn) %>%
tidyr::unnest(author, .drop = TRUE)
datatable(authors)
authors <- cr_result %>%
dplyr::select(author, doi, issn) %>%
tidyr::unnest(author, .drop = TRUE)
datatable(authors)
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
View(cr_result)
View(cr_result)
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
references <- cr_result %>%
dplyr::select(reference, doi)%>%
tidyr::unnest(reference,.drop=TRUE)
datatable(references)
references <- cr_result %>%
dplyr::select(reference, doi)%>%
tidyr::unnest(reference,.drop=FALSE)
datatable(references)
runApp('Crossref_API')
library(rcrossref)
library(htmltools)
library(magrittr)
library(purrr)
library(DT)
library(tidyr)
library(dplyr)
inputDOI = "10.1007/s11192-015-1765-5"
cr_result <- cr_works(dois = inputDOI) %>%
pluck("data")
cr_result %>%
datatable(cr_result)
#https://ciakovx.github.io/rcrossref.html#Unnesting_list_columns
# just authors
authors <- cr_result %>%
dplyr::select(author, doi, issn) %>%
tidyr::unnest(author, .drop = TRUE)
datatable(authors)
references <- cr_result %>%
dplyr::select(reference, doi)%>%
tidyr::unnest(reference,.drop=FALSE)
datatable(references)
runApp('Crossref_API')
runApp('Crossref_API')
library(rcrossref)
library(htmltools)
library(magrittr)
library(purrr)
library(DT)
library(tidyr)
library(dplyr)
inputDOI = "10.1007/s11192-012-0662-4"
cr_result <- cr_works(dois = inputDOI) %>%
pluck("data")
cr_result %>%
datatable(cr_result)
#https://ciakovx.github.io/rcrossref.html#Unnesting_list_columns
# just authors
authors <- cr_result %>%
dplyr::select(author, doi, issn) %>%
tidyr::unnest(author, .drop = TRUE)
datatable(authors)
references <- cr_result %>%
dplyr::select(reference, doi)%>%
tidyr::unnest(reference,.drop=FALSE)
datatable(references)
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('Crossref_API')
runApp('~/Documents/GitHubhttps/github_com/poppy-nicolette/INFO6270_ShinyDash/another_dashboard')
runApp('Crossref_API')
runApp('~/Documents/GitHubhttps/github_com/poppy-nicolette/INFO6270_ShinyDash/another_dashboard')
runApp('Crossref_API')
licenses <- cr_result %>%
dplyr::select(license, doi)%>%
tidyr::unnest(license, .drop = FALSE)
datatable(licenses)
runApp('Crossref_API')
load("~/Documents/GitHubhttps/github_com/poppy-nicolette/INFO6270_ShinyDash/Crossref_API/Crossref_API/.RData")
runApp('Crossref_API')
install.packages("roadoi")
# load the roadoi package
library(roadoi)
library(roadoi)
# Use c() to create a vector of DOIs
my_dois <- c("10.1007/s11192-012-0662-4")
# use oadoi_fetch() to get Unpaywall data on those DOIs
my_dois_oa <- roadoi::oadoi_fetch(dois = my_dois, email = "pnriddle@dal.ca")
View(my_dois_oa)
View(my_dois_oa[[2]][[1]])
View(my_dois_oa[[3]][[1]])
View(my_dois_oa[[4]][[1]])
View(my_dois_oa[[21]][[1]])
View(my_dois_oa[[2]][[1]])
